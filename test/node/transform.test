UTest({
	$teardown () {
		mask.cfg('getFile', null);
	},
	async 'should transform css and mask' () {
		let getFile = (path) => {
			var css = `
				.foo { color: red }
				.foo .item { background: green;}
			`;		
			return (new mask.class.Deferred).resolve(css);
		};

		mask.cfg('getFile', getFile);
		
		let template = `
			import foo from 'foo.css' as bem;

			[bem]
			.foo {
				ul > li.item > 'Hello'
			}
		`;

		let html = await mask.renderAsync(template);

		has_(html, /"foo_.{2,4}/);
		hasNot_(html, "[bem]");
		has_(html, "as bem (salt='");
	}
})